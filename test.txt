local folder-->> stage--> commit --> repo

git config --global user.name "Redwan"
git config --global user.email "jKJSKJ"


git status 
check status

git init
initialized

git add --a or git add .
all item stage

git commit -m "commit name"
take snapshot and save in local mechine

git log 
see all commit

git add first.txt
only the first.txt will go into stage

rm -rf .git
git local repo will deleted 

git clone server_repo_link file_name
download the repo from server to our local mechine.





####file status life cycle
.git is the repo or folder
(UNTRACKED file)

git add (file is UNMODIFIED TRACKED STAGED)//first time called tracked

modify(MODIFIED)

git add(STAGED)

commit(UNMODIFIED)


#####git ignore
touch //touch is the commund that create new file in linux ( exe: touch name.txt)
 
 git ignore is use to ignore some file lets say we have a log file in our software and we want to ignore this 
 file we dont want this file to get commited

 to ignore some file 
 1. we have to make a file name .gitignore (this is a hidden file)
      to see hidden file in linux we have to write commund (ls -a)or (ls -al) or (ls -a1), 
 2. just write the name of the ignored file in the new file we have created then save
 3. to ignore some specific types of file lets say .exe or .log we can write *.log instead of the file name
 4. to ignore folder save the name of the folder folder/ (all folder with this name)
                                                 /folder/ (just the folder in the working folder)
                                                folder path (just the folder)

day2
       
##git diff

git diff
use to determine the difference between stage and working directory.(when we stage a file and then edit that file again 
git diff compare the staged file with the edited file)

git diff --staged 
use to determine the difference between stage and last commited version.


##skipping the stage(direct commit)
git commit -a -m "name"
//all the tracked file will get commited (no untracked file will commited so if we create a new file this will not commited)


day3
##move remove and rename file
git rm "fileName"

day 4
##git log details

git log -p
it will tell us in details what we have modified in that commit what have been deleted what have been added

git log -p -2
it will only show the details of last 2 commit(we can use any number instead of 2)

git log --stat
brifly tell us what happen in that commit

git log --pretty=oneline
all commit will show one by one in one simple line(just the name of the commit)

git log --pretty=short
all commit will shown but only the author name and commit name

git log --pretty=full
all commit will shown but only the author name and commit name and who did the commit(commitor)
//who create the file (author).Who commit the change(commitor)

git log --since=2.days
only the commit of last 2 days
//git log --since=2.weeks/2.months/2.years

git log --pretty=format:"%h--%an"
use to format the commit menually as we want %h %an is in details in git scm website

day 5
##Unstage file/Unmodify file

git restore --staged file_name
unstaged a stage file

git checkout -- fileName  or git restore file_name
unmodify file(if we edit or modify a file and then want to make that perticular file like last commit)

git checkout -f
all file will go back to last commit



day 6
##work with Remote server
remote - a server who store git repo

step 1 : we have to add the remote repo link in our local folder
  (git remote add origin https://github.com/redwanhasan980/Git_tutorial.git) using this
   // here "origin" is the name of that remote url.

step 2: push in the remote
     first we have to give permission
      
     
     git token:
     git hub setting-->Developer settings-->personal access token-->classic token-->generate new token-->
 token: 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
 
 git remote set-url origin https://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@github.com/redwanhasan980/Git_tutorial.git
    git push origin main
   
   
    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
   git remote set-url origin https://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@github.com/redwanhasan980/Git_tutorial.git
   git push origin main

   
 ##day 7(Alias)
 if we want to write git status but in short. lets say git st 

git config --global alias.st 'ststus'
now if we write git st instead of git status it will do  the same work 
Exm:
git config --gloabal alias.unstage 'restore --staged --'



##day 8 (Branches)


                       .branche 1---->(design part)--> added design .
(master branches)      .                                            .    (master branches)
1st com---> 2nd commit .(new idea)                                  .---> marge design and dev
                       .                                            .
                       .branche 2---->(develop)-->added funtion     .


 -->making new branche
git checkout -b branch_name

(make new branche and take me there)

